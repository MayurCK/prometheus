#----------------------------------Prometheus operator--------------------------#
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
- kind: ServiceAccount
  name: prometheus-operator
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus-operator
rules:
- apiGroups:
  - extensions
  resources:
  - thirdpartyresources
  verbs:
  - "*"
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - "*"
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - prometheuses
  - prometheuses/finalizers
  - alertmanagers/finalizers
  - servicemonitors
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "delete"]
- apiGroups: [""]
  resources:
  - services
  - endpoints
  verbs: ["get", "create", "update"]
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-operator
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    k8s-app: prometheus-operator
  name: prometheus-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: prometheus-operator
  template:
    metadata:
      labels:
        k8s-app: prometheus-operator
    spec:
      containers:
      - args:
        - --kubelet-service=kube-system/kubelet
        - --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1
        image: quay.io/coreos/prometheus-operator:v0.17.0
        name: prometheus-operator
        ports:
        - containerPort: 8080
          name: http
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-operator

#--------------------alert-managers------------------#
apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  name: example
spec:
  replicas: 3
---
#--------------------alert-managers-configuration-secret------------------#
Version: v1
kind: Secret
metadata:
  name: alertmanager-example
data:
  alertmanager.yaml: |-
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'webhook'
    receivers:
    - name: 'webhook'
      webhook_configs:
      - url: 'http://alertmanagerwh:30500/'
---
#--------------------service to access the alert manager----------------#
apiVersion: v1
kind: Service
metadata:
  name: alertmanager-example
spec:
  type: NodePort
  ports:
  - name: web
    nodePort: 30903
    port: 9093
    protocol: TCP
    targetPort: web
  selector:
    alertmanager: example
---
#--------------------ingress rule for the alert manager service optional --------#
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/auth-tls-cert-header: "false"
    ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/ssl-passthrough: "true"
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: haproxy
  name: alertmanager-ingress
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: alertmanager-example
          servicePort: 9093
        path: /alrt
status:
  loadBalancer: {}
---
#-------------------------------Prometheus instance for sending alerts , it will connect to the alertmanager-example service and the select the service via svcMonitorSelector
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: example
spec:
  replicas: 2
  alerting:
    alertmanagers:
    - namespace: default
      name: alertmanager-example
      port: web
  serviceMonitorSelector:
    matchLabels:
      team: frontend
  ruleSelector:
    matchLabels:
      role: alert-rules
      prometheus: example
---
#------------------------------alert rules config map---------------------#
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-example-rules
  labels:
    role: alert-rules
    prometheus: example
data:
  example.rules.yaml: |+
    groups:
    - name: ./example.rules
      rules:
      - alert: Lots_Of_Jobs_In_Queue
        expr: queued_req > 100
        for: 10s
        labels:
          severity: major
        annotations:
          summary: Billing queue appears to be building up (consistently more than 100 jobs waiting)
---
#----------------------------svc for exposing prometheus instance-----------------#
apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
spec:
  type: NodePort
  ports:
  - nodePort: 30900
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    prometheus: example
---
#---------------------------------sample app for which we have to use alerts-------------#
#---------------------------------------Custom Exporter-----------------#
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: example-app
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: example-app
    spec:
      containers:
      - name: example-app
        image: mayurhingnekar/java-exporter:latest     # update metrics via http://svc/updatemetrics?queued_req=6 and get metrices via http://cs-svc/metrics
        ports:
        - name: web
          containerPort: 7777
---
#---------------------------------------Custom Exporter svc----------------#
kind: Service
apiVersion: v1
metadata:
  name: example-app
  labels:
    app: example-app
spec:
  selector:
    app: example-app
  ports:
  - name: web
    port: 7777
---
#---------------------------------------Custom Exporter svc monitor 3rd party-----------------#
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: example-app
  labels:
    team: frontend  #----this is than used by the Prometheus instance for monitoring svc#
spec:
  selector:
    matchLabels:
      app: example-app
  endpoints:
  - port: web
---

